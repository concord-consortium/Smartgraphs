// Generated by CoffeeScript 1.3.3
(function() {

  defineJasmineHelpers();

  describe("Dataref, ", function() {
    describe("Smartgraphs.LinearEquation with slope-intercept expression form", function() {
      var linearEquation;
      linearEquation = Smartgraphs.LinearEquation.create();
      linearEquation.expressionForm = 'slope-intercept';
      describe("having slope of 2, yIntercept of 5 and xPrecision of 0.5", function() {
        beforeEach(function() {
          linearEquation.xInterval = 0.5;
          return linearEquation.params = {
            slope: 2,
            yIntercept: 5
          };
        });
        return it("should generate proper dataset points", function() {
          var linePoints;
          linePoints = linearEquation.getPoints(0, 2, 0, 10);
          return expect(linePoints).toEqualPairs([0, 5], [0.5, 6], [1, 7], [1.5, 8], [2, 9]);
        });
      });
      return describe("having slope of 1 and yIntercept of 2 and xPrecision of 0.5", function() {
        beforeEach(function() {
          linearEquation.xInterval = 0.5;
          return linearEquation.params = {
            slope: 1,
            yIntercept: 2
          };
        });
        return it("should generate proper dataset points", function() {
          var linePoints;
          linePoints = linearEquation.getPoints(0, 2, 0, 10);
          return expect(linePoints).toEqualPairs([0, 2], [0.5, 2.5], [1, 3], [1.5, 3.5], [2, 4]);
        });
      });
    });
    describe("Smartgraphs.Sinusoidal with sine-cosine expression form", function() {
      var sinusoidalEquation;
      sinusoidalEquation = Smartgraphs.SinusoidalEquation.create();
      sinusoidalEquation.expressionForm = 'sine-cosine';
      describe("having amplitude of 2, phase of 1 centerAmplitude of 2 and frequency of 1", function() {
        beforeEach(function() {
          sinusoidalEquation.xInterval = 0.5;
          sinusoidalEquation.params = {
            amplitude: 2,
            phase: 1,
            centerAmplitude: 2,
            frequency: 1
          };
          return sinusoidalEquation.angularFunction = 'sine';
        });
        return it("should generate proper dataset points", function() {
          var linePoints;
          linePoints = sinusoidalEquation.getPoints(0, 2, 0, 10);
          return expect(linePoints).toEqualPairs([0, 3.682941969615793], [0.5, 3.994989973208109], [1, 3.8185948536513634], [1.5, 3.196944288207913], [2, 2.2822400161197343]);
        });
      });
      return describe("having amplitude of 1, phase of 1 centerAmplitude of 3 and frequency of 2", function() {
        beforeEach(function() {
          sinusoidalEquation.xInterval = 0.5;
          return sinusoidalEquation.params = {
            amplitude: 1,
            phase: 1,
            centerAmplitude: 3,
            frequency: 2
          };
        });
        return it("should generate proper dataset points", function() {
          var linePoints;
          linePoints = sinusoidalEquation.getPoints(0, 2, 0, 10);
          return expect(linePoints).toEqualPairs([0, 3.8414709848078967], [0.5, 3.909297426825682], [1, 3.1411200080598674], [1.5, 2.2431975046920716], [2, 2.0410757253368614]);
        });
      });
    });
    return describe("Smartgraphs.CompositeEquation with y = log(x) + sin(x) expression", function() {
      var compositeEquation;
      compositeEquation = Smartgraphs.CompositeEquation.create();
      return describe("having xPrecision of 0.5", function() {
        beforeEach(function() {
          compositeEquation.expression = 'y = log(x) + sin(x)';
          compositeEquation.xInterval = 0.5;
          return compositeEquation.params = {};
        });
        it("should filter out Infinity", function() {
          var linePoints;
          linePoints = compositeEquation.getPoints(0, 0.5, 0, 1);
          return expect(linePoints).toEqualPairs([0.5, -0.21372164195574228]);
        });
        return it("should generate proper dataset points", function() {
          var linePoints;
          linePoints = compositeEquation.getPoints(0, 2.2, 0, 1);
          return expect(linePoints).toEqualPairs([0.5, -0.21372164195574228], [1, 0.8414709848078965], [1.5, 1.4029600947122187], [2, 1.6024446073856269]);
        });
      });
    });
  });

}).call(this);
